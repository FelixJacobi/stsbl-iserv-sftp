#!/usr/bin/perl -CSDAL

use warnings;
use strict;
use Cwd qw(abs_path cwd);
use File::Basename;
use File::Compare;
use IPC::Run;

my $fn_dirs = "/etc/iserv/sftp-chroot";
my $fn_binaries = "/etc/iserv/sftp-chroot-binaries";
my $dest = "/sftp-chroot";

sub mount_failure($)
{
  my $mountpoint = shift;

  die "mount of $mountpoint in $dest failed!\n";
}

# mount tmpfs if /sftp-chroot is not a mountpoint
if (system ("mountpoint", "-q", $dest))
{
  print "mount tmpfs on $dest.\n";
  system ("umount", "-l", "-R", $dest) == 0 or die "umount of $dest failed!\n";
  system ("mount", "-o", "mode=755,uid=0,gid=0", "-t", "tmpfs", "tmpfs", "/sftp-chroot") == 0 or mount_failure "tmpfs";
}

open my $fh, "<", $fn_dirs;

my %want;
my %given;

while (<$fh>)
{
  chomp;

  # empty line
  next if /^$/;
  # comment
  next if /^#/;

  # allow only absolute paths
  die "invalid directory name: $_\n!" if not /^\//;

  print "adding mount $_ to chroot.\n";
  $want{$_} = 1;
}

close $fh;

open $fh, "<", "/proc/mounts";

while (<$fh>)
{
  chomp;
  next if not /^.*\s\/sftp-chroot(.*)\s(ext[0-9]|tmpfs|devtmpfs|sysfs|proc|devpts)/;
  my $mountpoint = $1;
  next if $mountpoint eq "" or not defined $mountpoint;

  print "mount $mountpoint given.\n";

  if (defined $want{$mountpoint})
  {
    print "mount $mountpoint is wanted, keep it.\n";
    $given{$mountpoint} = 1;
  } else
  {
    # ignore sub mounts in /run and /var/run
    next if $mountpoint =~ /^(\/run|\/var\/run)/;
    print "mount $mountpoint is not wanted, unmount it.\n";
    system ("umount", "-l", "-R", $dest . $mountpoint) == 0 or die "umount of " . $dest . $mountpoint . " failed!\n";
    rmdir $dest . $mountpoint;
  }
}

for (keys %want)
{
  next if defined $given{$_};
  
  die "invalid directory $_!" if not -e $_;

  print "bind not existing $_.\n";
  
  system ("mkdir", "-p", $dest . $_) == 0 or die "mkdir " . $_ . $dest . " failed!\n";

  # special handling for sys/proc/dev/pts
  if ($_ eq "/dev")
  {
    system ("mount", "-t", "devtmpfs", "udev", $dest . $_) == 0 or mount_failure $_;
  } elsif ($_ eq "/sys")
  {
    system ("mount", "-t", "sysfs", "sysfs", $dest . $_, "-o", "rw,nosuid,nodev,noexec,relatime") == 0 or mount_failure $_;
  } elsif ($_ eq "/proc")
  {
    system ("mount", "-t", "proc", "proc", $dest . $_, "-o", "rw,nosuid,nodev,noexec,relatime") == 0 or mount_failure $_;
  } elsif ($_ eq "/dev/pts")
  {
    system ("mount", "-t", "devpts", "devpts", $dest . $_) == 0 or mount_failure $_; 
  } else 
  {
    system ("mount", "--bind", $_, $dest . $_) == 0 or mount_failure $_;
  }
}

open $fh, "<", $fn_binaries;

undef %want;
undef %given;

while (<$fh>)
{
  chomp;

  # empty line
  next if /^$/;
  # comment
  next if /^#/;

  # allow only absolute paths
  die "invalid binary name: $_\n!" if not /^\//;
  
  print "adding binary $_ to chroot.\n";
  $want{$_} = 1;
}

sub mkdir_recursive($)
{
  my $cur = cwd;
  chdir "/";
  my @dir = split /\//, shift;
  for (@dir) {
    mkdir -p $_ or die "mkdir failed: $!\n";
    chdir $_;
  }

  chdir $cur;
}

sub is_vdso($)
{
  my ($val) = @_;
  # linux-vdso.so.1/linux-gate.so.1 are not a real shared objects
  return ($val eq "linux-vdso.so.1" or
     $val eq "linux-gate.so.1");
}

sub is_wanted($)
{
  my $lib = shift;
  return defined $want{$lib};
}

sub resolve_symlink($)
{
  my $link = shift;

  return if not -s $link;
  my $abs = abs_path $link;
  $want{$abs} = 1;
  print "adding binary $abs to chroot.\n"
}

sub resolve_ldd($)
{
  IPC::Run::run ["/usr/bin/ldd", shift],
    ">", IPC::Run::new_chunker "\n",
    sub
    {
      # ldd /usr/bin/scp           
      # linux-vdso.so.1 (0x00007ffd90f62000)
      # 	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe48ef60000)
      # 	/lib64/ld-linux-x86-64.so.2 (0x0000560dae3ed000)
      local $_ = shift;
      my $lib;

      if (/^\sstatically\slinked$/)
      {
	# noop
      } elsif (/^\s.* => (.*)\s\(.*\)$/)
      {
	if (not is_vdso $1 and not is_wanted $1)
	{
          $want{$1} = 1;
	  $lib = $1;
	  resolve_symlink $lib;
	  &resolve_ldd($lib);
	}
      } elsif (/^\s(.*)\s\(.*\)$/)
      {
	if (not is_vdso $1 and not is_wanted $1)
	{
	  $want{$1} = 1;
	  $lib = $1;
	  resolve_symlink $lib;
	  &resolve_ldd($lib);
	}
      } else {
	die "invalid line $_!\n";
      }

      print "adding binary $lib to chroot.\n" if defined $lib;
    };
}

# add complete libc6
for my $arch (sort split /\n/, qx(dpkg --print-architecture; dpkg --print-foreign-architectures))
{
  IPC::Run::run ["dpkg", "-L", "libc6:$arch"],
    ">", IPC::Run::new_chunker "\n",
    sub
    {
      local $_ = shift;
      chomp;
      my $lib = $_;

      if (/^(\/lib\/|\/usr\/lib).*\.so(\.[0-9]|)$/)
      {
        $want{$lib} = $lib;
        print "adding binary $lib to chroot.\n";
      }
    },
    "2>", \my $throw_it_away;
}

for (keys %want)
{
  resolve_ldd $_;
}

for (keys %want)
{
  my $dir = dirname $_;
  
  if (not -d $dest.$dir)
  {
    print "mkdir $dest$dir.\n";
    system "mkdir", "-p", $dest.$dir;
  }

  if (compare($_, $dest.$_))
  {
    print "copy $_ to ${dest}${_}.\n";
    system ("cp", "-afb", $_, $dest.$_) == 0 or die "copy failed: $!\n"; 
  }
}
